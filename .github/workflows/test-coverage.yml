# This workflow will run tests with coverage and upload the results to Codecov
# To enable Codecov integration:
# 1. Sign up at https://codecov.io (free for open source)
# 2. Add your repository to Codecov
# 3. Optionally, add CODECOV_TOKEN as a secret in your repository settings
#    (not required for public repositories)

name: Test and Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: learnapi_test
        ports:
          - 5432:5432
        # Optional health check to help ensure readiness
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    env:
      # Ensure repository tests can connect to Postgres service
      TEST_DB_HOST: 127.0.0.1
      TEST_DB_PORT: 5432
      TEST_DB_USER: postgres
      TEST_DB_PASSWORD: postgres
      TEST_DB_NAME: learnapi_test
      # Skip E2E tests in CI to avoid waiting for running API
      SKIP_E2E_TESTS: "true"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install dependencies
      run: go mod download

    - name: Wait for Postgres to be ready
      shell: bash
      run: |
        for i in {1..60}; do
          (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 && echo "Postgres is up" && break
          echo "Waiting for Postgres..."
          sleep 1
        done

    - name: Run tests with full instrumentation coverage
      run: |
        # Instrument application packages and run all tests (including external tests under ./tests)
        go test -short -v \
          -covermode=atomic \
          -coverpkg=./internal/...,./pkg/...,./cmd/... \
          ./... \
          -coverprofile=coverage.txt
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-learn-api
        fail_ci_if_error: false  # Optional: Set to true if you want CI to fail when Codecov fails
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: coverage.txt
